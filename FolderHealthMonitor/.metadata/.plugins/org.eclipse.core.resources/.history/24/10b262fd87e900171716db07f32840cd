package com.healthMonitor;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.TimerTask;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

public class HealthMonitorScheduler extends TimerTask {

	final static String SECURED_FOLDER = "D:\\secure\\";
	final static String ARCHIVE_FOLDER = "D:\\archive\\";
	final static Double MAX_ALLOWED_FILE_SIZE = 25.0;
	final static String[] EXEFileExtensions = {"exe", "sh", "bat", "msi"};
	
	public void run() {

		
		File f = new File(SECURED_FOLDER);

		if(f.exists()) {
			ArrayList<String> names = new ArrayList<String>(Arrays.asList(f.list()));
	
			ArrayList<File> files = new ArrayList<File>();
			ArrayList<File> deletedFiles = new ArrayList<File>();
			ArrayList<File> archivedFiles = new ArrayList<File>();
			
			for(String name:names) {
				File tempFile = new File(SECURED_FOLDER+name);
				String fileExtension = FilenameUtils.getExtension(tempFile.getName());
				if(Arrays.asList(EXEFileExtensions).contains(fileExtension)) {
					FileUtils.deleteQuietly(tempFile);
					deletedFiles.add(tempFile);
				} else {
					files.add(tempFile);
				}
			}
			
			Collections.sort(files, new Comparator<File>() {
			    public int compare(File f1, File f2) {
			    	int out = -1;
			        if(f1.lastModified() < f2.lastModified()) {
			        	out = -1;
			        } else if(f1.lastModified() == f2.lastModified()) {
			        	out = 0;
			        } else if(f1.lastModified() > f2.lastModified()) {
			        	out = 1;
			        }
			        return out;
			    }
			});
			
//			for(File file:files) {
//				System.out.println(file.getAbsolutePath());
//				System.out.println(FilenameUtils.getExtension(file.getName()));
//			}
			
			Double allFileSize = 0.0;
			for(int i = files.size()-1; i > -1; i--) {
				File file = files.get(i);
				Double fileSize = file.length()*1.0/FileUtils.ONE_MB;
				allFileSize += fileSize;
				if(allFileSize > MAX_ALLOWED_FILE_SIZE) {
					for(int j = 0; j < i+1; j++) {
						File archiveFile = files.get(j);
						try {
						    FileUtils.moveFile(new File(SECURED_FOLDER+archiveFile.getName()),
						    		new File(ARCHIVE_FOLDER+archiveFile.getName()));
						    archivedFiles.add(archiveFile);
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					files.subList(0, i+1).clear();
					break;
				}
			}


			System.out.println("Current size of 'secured' folder = "
		    		+ Math.round(FileUtils.sizeOfDirectory(new File(SECURED_FOLDER))*1.0/FileUtils.ONE_MB*100.0)/100.0);
			System.out.println("Total number of files archived = " + archivedFiles.size());
	    	System.out.println("Total number of files deleted = " + deletedFiles.size());
		    if(archivedFiles.size() > 0) {
		    	System.out.println("Archive file list is:");
			    for(File archiveFile:archivedFiles) {
			    	System.out.println(archiveFile.getName());
			    }
		    }
		    System.out.println();
		    if(deletedFiles.size() > 0) {
		    	System.out.println("Delete file list is:");
			    for(File deletedFile:deletedFiles) {
			    	System.out.println(deletedFile.getName());
			    }
		    }

			
			
//			if(files.size() > 0) {
//				System.out.println(allowedFileCount);
//				System.out.println(files.size());
//			}
			
		} else {
			System.out.println("Folder Name " + SECURED_FOLDER
					+ " is not present. Please create folder manually and retry running the program.");
		}
		
		System.out.println("");
	
	}
	
}
