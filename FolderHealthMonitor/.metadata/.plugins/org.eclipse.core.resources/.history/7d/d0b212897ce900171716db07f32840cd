package com.healthMonitor;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.TimerTask;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

public class HealthMonitorScheduler extends TimerTask {

	final static String SECURED_FOLDER = "D:\\secure\\";
	final static String ARCHIVE_FOLDER = "D:\\archive\\";
	final static Double MAX_ALLOWED_FILE_SIZE = 25.0;
	
	public void run() {

		
		File f = new File(SECURED_FOLDER);

		if(f.exists()) {
			ArrayList<String> names = new ArrayList<String>(Arrays.asList(f.list()));
			System.out.println(names);
	
			ArrayList<File> files = new ArrayList<File>();
			
			for(String name:names) {
				File tempFile = new File(SECURED_FOLDER+name);
				files.add(tempFile);
				//System.out.println("Before Format : " + tempFile.lastModified());
				//SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
				//System.out.println("After Format : " + sdf.format(tempFile.lastModified()));
			}
			
			Collections.sort(files, new Comparator<File>() {
			    public int compare(File f1, File f2) {
			    	int out = -1;
			        if(f1.lastModified() < f2.lastModified()) {
			        	out = -1;
			        } else if(f1.lastModified() == f2.lastModified()) {
			        	out = 0;
			        } else if(f1.lastModified() > f2.lastModified()) {
			        	out = 1;
			        }
			        return out;
			    }
			});
			
			for(File file:files) {
				System.out.println(file.getAbsolutePath());
				System.out.println(FilenameUtils.getExtension(file.getName()));
			}
			
			int allowedFileCount = 0;
			Double allFileSize = 0.0;
			for(int i = files.size()-1; i > -1; i--) {
				File file = files.get(i);
				Double fileSize = file.length()*1.0/FileUtils.ONE_MB;
				allFileSize += fileSize;
				if(allFileSize <= MAX_ALLOWED_FILE_SIZE) {
					allowedFileCount += 1;
				} else {
					for(int j = 0; j < i+1; j++) {
						File archiveFile = files.get(j);
						try {
						    FileUtils.moveFile(new File(SECURED_FOLDER+archiveFile.getName()),
						    		new File(ARCHIVE_FOLDER+archiveFile.getName()));
						} catch (IOException e) {
						    e.printStackTrace();
						}
					}
					files.subList(0, i+1).clear();
					break;
				}
			}
			
			if(files.size() > 0) {
				System.out.println(allowedFileCount);
				System.out.println(files.size());
			}
			
		} else {
			System.out.println("Folder Name " + SECURED_FOLDER + " is not present. Please create folder manually and retry running the program.");
		}
		
		System.out.println("");
	
	}
	
}
